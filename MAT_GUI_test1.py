import tkinter as tk
from tkinter import ttk
from tkinter.filedialog import askopenfilename, asksaveasfilename
import pefile
from OTXv2 import OTXv2
import hashlib
from OTXv2 import IndicatorTypes
import string
import binascii
import os

OTX_API_KEY = ""

def open_file():
    global filename
    filename = askopenfilename(filetypes=[("Executable files", "*.exe")])
    if filename:
        file_size = os.path.getsize(filename)
        file_hash_md5, file_hash_sha256, file_hash_sha1, file_imphash = get_file_hashes(filename)
        file_imports = get_file_imports(filename)
        file_strings = get_file_strings(filename)
        file_hex_editor = get_file_hex_editor(filename)
        file_alienvault_result = get_alienvault_result(file_hash_md5)

        display_tab("File Size", "File size: " + str(file_size))
        display_tab("File Hashes", "MD5: " + file_hash_md5 + "\nSHA-256: " + file_hash_sha256 + "\nSHA-1: " + file_hash_sha1)
        display_tab("File Imports", "\n".join(file_imports))
        display_tab("File Strings", "\n".join(file_strings))
        display_tab("File Hex Editor", file_hex_editor)
        display_tab("Alienvault Result", file_alienvault_result)

def get_file_hashes(filename):
    with open(filename, "rb") as file:
        file_content = file.read()
        hash_md5 = hashlib.md5(file_content).hexdigest()
        hash_sha256 = hashlib.sha256(file_content).hexdigest()
        hash_sha1 = hashlib.sha1(file_content).hexdigest()
        imphash = pefile.PE(filename).get_imphash()
    return hash_md5, hash_sha256, hash_sha1, imphash

def get_file_imports(filename):
    pe = pefile.PE(filename)
    imports = []
    for dll in pe.DIRECTORY_ENTRY_IMPORT:
        imports.append(dll.dll.decode())
        for function in dll.imports:
            if function.name is not None:
                imports.append(function.name.decode())
            else:
                imports.append("None")
    return imports

def get_file_strings(filename, min_len=8):
    strings = []
    with open(filename, errors="ignore") as file:
        result = ""
        for character in file.read():
            if character in string.printable:
                result += character
            else:
                if len(result) >= min_len:
                    strings.append(result)
                result = ""
        if len(result) >= min_len:
            strings.append(result)
    return strings

def get_file_hex_editor(filename):
    hex_editor_output = ""
    counter = 0
    with open(filename, "rb") as file:
        while True:
            byte_s = file.read(1)
            data_bytes2ascii = binascii.b2a_hex(byte_s).decode('utf-8')
            hex_editor_output += data_bytes2ascii + "\t"
            if counter == 16:
                hex_editor_output += "\n"
                counter = 0
            if not byte_s:
                break
            counter += 1
    return hex_editor_output

def get_alienvault_result(file_hash_md5):
    otx = OTXv2(OTX_API_KEY, server='https://otx.alienvault.com/')
    result = otx.get_indicator_details_full(IndicatorTypes.FILE_HASH_MD5, file_hash_md5)
    return str(result)

def display_tab(tab_name, content):
    tab = ttk.Frame(tab_control)
    tab_control.add(tab, text=tab_name)
    scroll = ttk.Scrollbar(tab)
    scroll.pack(side=tk.RIGHT, fill=tk.Y)
    text_widget = tk.Text(tab, yscrollcommand=scroll.set)
    text_widget.insert(tk.END, content)
    text_widget.pack(fill=tk.BOTH, expand=True)
    scroll.config(command=text_widget.yview)

def save_file():
    if filename:
        content = tab_control.select()
        tab_name = tab_control.tab(content, option="text")
        text_widget = tab_control.nametowidget(content).children["!text"]
        file_content = text_widget.get("1.0", tk.END)
        file_extension = ".txt"
        file_types = [("Text Files", "*.txt")]
        file_name = asksaveasfilename(defaultextension=file_extension, filetypes=file_types)
        if file_name:
            with open(file_name, "w") as file:
                file.write(file_content)

root = tk.Tk()
root.title("Output GUI")

# Create a tab control
tab_control = ttk.Notebook(root)
tab_control.pack(fill=tk.BOTH, expand=True)

# Create an "Open File" button
open_file_button = ttk.Button(root, text="Open File", command=open_file)
open_file_button.pack()

# Create a "Save File" button
save_file_button = ttk.Button(root, text="Save File", command=save_file)
save_file_button.pack()

root.mainloop()